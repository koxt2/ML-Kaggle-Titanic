import time
import pandas as pd
import numpy as np
from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import precision_score, recall_score, f1_score, roc_auc_score

start_time = time.time()

########## SETUP ##########
###########################
# Make the data run the same every time it's run 
np.random.seed(42)

########## Load Data ##########
###############################
def load_train_data():
    return pd.read_csv('/Users/richard/Documents/Python/Machine-Learning/titanic/train.csv')
train_data = load_train_data()

def load_test_data():
    return pd.read_csv('/Users/richard/Documents/Python/Machine-Learning/titanic/test.csv')
test_data = load_test_data()

########## Calibrate Train Data ##########
##########################################
# Drop irrelavant columns
prepared_train_data = train_data.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)

# Convert alpha to numerical 
prepared_train_data['Sex'].replace('male', 0, inplace=True)
prepared_train_data['Sex'].replace('female', 1, inplace=True)
prepared_train_data['Embarked'].replace('S', 1, inplace=True)
prepared_train_data['Embarked'].replace('C', 2, inplace=True)
prepared_train_data['Embarked'].replace('Q', 3, inplace=True)

# Calculate averages for missing data
age_median = prepared_train_data["Age"].median()
embarked_median = prepared_train_data["Embarked"].median()
fare_median = prepared_train_data["Fare"].median()

# Fill in the NULLs
prepared_train_data["Age"].fillna(age_median, inplace=True)
prepared_train_data["Embarked"].fillna(embarked_median, inplace=True)

# Create new categories
prepared_train_data["lone_travellor"] = prepared_train_data["SibSp"] + prepared_train_data["Parch"]

########## Calibrate Test Data ##########
#########################################
# Drop irrelavant columns
prepared_test_data = test_data.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)

# Convert alpha to numerical 
prepared_test_data['Sex'].replace('male', 0, inplace=True)
prepared_test_data['Sex'].replace('female', 1, inplace=True)
prepared_test_data['Embarked'].replace('S', 1, inplace=True)
prepared_test_data['Embarked'].replace('C', 2, inplace=True)
prepared_test_data['Embarked'].replace('Q', 3, inplace=True)

# Fill in the NULLs 
prepared_test_data["Age"].fillna(age_median, inplace=True)
prepared_test_data["Embarked"].fillna(embarked_median, inplace=True)
prepared_test_data["Fare"].fillna(fare_median, inplace=True)

# Create new categories
prepared_test_data["lone_travellor"] = prepared_test_data["SibSp"] + prepared_test_data["Parch"]

########## FINAL MODEL ##########
#################################
# Separate predictor and labels from prepared_train_data
train_data_predictors = prepared_train_data.drop("Survived", axis=1)
train_data_labels = prepared_train_data["Survived"].copy()

# Fine Tune using GridSearch 
forest_clf = RandomForestClassifier(random_state=42)
param_grid = [{'n_estimators': [10, 30, 60, 100, 150], 'max_features': [1, 2, 4, 6]},]
grid_search = GridSearchCV(forest_clf, param_grid, cv=5)
grid_search.fit(train_data_predictors, train_data_labels)
final_model = grid_search.best_estimator_

predictions = final_model.predict(train_data_predictors)

print("""
   Final Model Precision: """, precision_score(train_data_labels, predictions))
print("   Final Model Recall: ", recall_score(train_data_labels, predictions))
print("   Final Model f1: ", f1_score(train_data_labels, predictions))
print("   Final Model ROC_AUC: ", roc_auc_score(train_data_labels, predictions))

#############################################################
########## Use the final model to predict Survived ##########
#############################################################
survived_prediction = final_model.predict(prepared_test_data) # Perform the prediction

survived_prediction = pd.DataFrame(survived_prediction)
survived_prediction.to_csv('file.csv') 

print ("""
My program took""", time.time() - start_time, "to run")











